# https://rcmdnk.com/blog/2017/11/16/computer-vim/
# vim8でdeopleteを使うために必要
[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'


[[plugins]]
repo = 'Shougo/dein.vim'


[[plugins]]
repo  = 'Shougo/vimproc.vim'
build = 'make'


[[plugins]]
repo = 'Shougo/context_filetype.vim'


[[plugins]]
repo     = 'scrooloose/nerdtree'
depends  = ['vim-nerdtree-syntax-highlight', 'nerdtree-git-plugin']
hook_add = '''
  let g:NERDTreeDirArrowExpandable = ''
  let g:NERDTreeDirArrowCollapsible = ''
  " https://qiita.com/CASIXx1/items/90cf13f20e1aa9fb94c7
  let g:NERDTreeLimitedSyntax = 1

  nnoremap [nerdtree] <Nop>
  nmap <Space>f [nerdtree]

  nnoremap <silent> [nerdtree]e :<C-u>NERDTreeToggle<CR>
'''


# https://qiita.com/okamos/items/4e1665ecd416ef77df7c
[[plugins]]
repo     = 'Shougo/denite.nvim'
depends  = ['neomru.vim', 'neoyank.vim']
hook_add = '''
  nnoremap [denite] <Nop>
  nmap <Space>u [denite]

  nnoremap <silent> [denite]t :<C-u>Denite filetype<CR>
  nnoremap <silent> [denite]p :<C-u>Denite file_rec<CR>
  nnoremap <silent> [denite]f :<C-u>DeniteBufferDir file_rec<CR>
  nnoremap <silent> [denite]j :<C-u>Denite line<CR>
  nnoremap <silent> [denite]g :<C-u>Denite grep<CR>
  nnoremap <silent> [denite][ :<C-u>DeniteCursorWord grep<CR>
  nnoremap <silent> [denite]u :<C-u>Denite file_mru<CR>
  nnoremap <silent> [denite]y :<C-u>Denite neoyank<CR>
  nnoremap <silent> [denite]r :<C-u>Denite -resume<CR>
  nnoremap <silent> [denite]; :<C-u>Denite -resume -immediately -select=+1<CR>
  nnoremap <silent> [denite]- :<C-u>Denite -resume -immediately -select=-1<CR>
  nnoremap <silent> [denite]n :<C-u>:DeniteBufferDir file file:new<CR>
  nnoremap <silent> [denite]d :<C-u>call denite#start([{'name': 'file_rec', 'args': ['~/dotfiles']}])<CR>

  call denite#custom#source('file_rec', 'matchers', ['matcher_cpsm'])
  call denite#custom#var('file_rec', 'command',
  \ ['pt', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', ''])
  call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
  \ [ '*~', '*.o', '*.exe', '*.bak',
  \ '.DS_Store', '*.pyc', '*.sw[po]', '*.class',
  \ '.hg/', '.git/', '.bzr/', '.svn/',
  \ 'node_modules/', 'bower_components/', 'tmp/', 'log/', 'vendor/ruby',
  \ '.idea/', 'dist/',
  \ '.vscode/',
  \ 'tags', 'tags-*'])
  call denite#custom#var('grep', 'default_opts', [])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'command',
  \ ['pt', '--nogroup', '--nocolor', '--smart-case', '--hidden'])
'''


[[plugins]]
repo      = 'bling/vim-airline'
depends   = ['vim-airline-themes']
hook_add  = '''
  let g:airline#extensions#tabline#enabled = 1

  " （タブが一個の場合）バッファのリストをタブラインに表示する機能をオフ
  let g:airline#extensions#tabline#show_buffers = 0

  " 0でそのタブで開いてるウィンドウ数、1で左のタブから連番
  let g:airline#extensions#tabline#tab_nr_type = 1

  let g:airline_section_b = '%{getcwd()}'
  let g:airline_section_c = '⭠ %{gitbranch#name()}'
  let g:airline_section_z = '%{ALEGetStatusLine()}'
  " let g:airline_section_b = '%t'

  " タブに表示する名前（fnamemodifyの第二引数）
  let g:airline#extensions#tabline#fnamemod = ':t'

  " airlineのカラーテーマ
  let g:airline_theme='badwolf'
  " let g:airline_theme='dracula'
  " let g:airline_theme='iceberg'
  " let g:airline_theme='molokai'
  " let g:airline_theme='wombat'

  " fancyテーマに切り替え
  let g:Powerline_symbols = 'fancy'

  " タブラインにもairlineを適用
  let g:airline#extensions#tabline#enabled = 1

  " ステータスラインの区切り文字を指定
  let g:airline_left_sep = '⮀'
  let g:airline_right_sep = '⮂'

  " タブラインのクリ切り文字を指定
  let g:airline#extensions#tabline#left_sep = '⮀'
  let g:airline#extensions#tabline#left_alt_sep = '⮀'

  " ステータスラインのbranchなどの絵文字を指定
  " let g:airline_symbols.linenr = '⭡'
  " let g:airline#extensions#branch#enabled = '⭠'
  " let g:airline_symbols.readonly = '⭤'
'''


# gitのブランチ名を表示
[[plugins]]
repo = 'itchyny/vim-gitbranch'


[[plugins]]
repo = 'tpope/vim-surround'


[[plugins]]
repo        = 'autozimu/LanguageClient-neovim'
rev         = 'next'
build       = 'bash install.sh'
hook_add = '''
  set hidden
  let g:LanguageClient_serverCommands = {
  \ 'vue': ['vls'],
  \ 'javascript': ['javascript-typescript-stdio'],
  \ 'typescript': ['javascript-typescript-stdio'],
  \ 'css': [''],
  \ 'html': ['']
  \ }
  let g:LanguageClient_autoStart = 1
  nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
  nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
  nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
'''


[[plugins]]
repo     = 'w0rp/ale'
hook_add = '''
  let g:ale_fixers = {
  \ 'javascript': ['prettier_standard']
  \ }
  let g:ale_linters = {
  \ 'html': ['htmlhint'],
  \ 'css': ['stylelint'],
  \ 'javascript': ['eslint']
  \ }

  " let g:ale_sign_column_always = 1

  " エラーのシンボルを変更
  let g:ale_sign_error = '✘'

  " 警告のシンボルを変更
  let g:ale_sign_warning = '⚠'

  " 保存時にチェック
  let g:ale_lint_on_save = 1

  " 入力時にはチェックしない
  let g:ale_lint_on_text_changed = 0

  " ファイルオープン時にチェックしたくない
  let g:ale_lint_on_enter = 0

  " ステータスラインのフォーマットを変更
  let g:ale_statusline_format = ['✘  %d', '⚠  %d', '✔ ']

  " エラーと警告をロケーションリストに表示しない
  let g:ale_set_loclist = 0

  " エラーと警告をクイックフィックスに表示する
  let g:ale_set_quickfix = 1

  " エラーと警告がなくなっても開いたままにする
  " let g:ale_open_list = 1
  " let g:ale_keep_list_window_open = 1

  nmap <silent> <C-k> <Plug>(ale_previous_wrap)
  nmap <silent> <C-j> <Plug>(ale_next_wrap)
'''


# スプラッシュの引用元
# https://gist.github.com/Kuniwak/7630711
[[plugins]]
repo     = 'mhinz/vim-startify'
hook_add = '''
  " よく使うファイルをブックマークとして登録しておく
  let g:startify_bookmarks = [
  \ '~/dotfiles/.vimrc',
  \ '~/dotfiles/.zshrc',
  \ '~/dotfiles/rc',
  \ '~/dotfiles/userautoload'
  \ ]
'''


[[plugins]]
repo = 'ryanoasis/vim-devicons'


# boostが必要
# Homebrewでインストール
[[plugins]]
repo  = 'nixprime/cpsm'
build = 'env PY3=ON ./install.sh'
